1. ОПИСАНИЕ СЕРВИСА

monapi - web-сервис, выполняющий алгоритм прореживания данных.

Сервис поддерживает два основных метода REST API:

1) GET http://host:port/api/data

Параметры запроса:
id - числовой идентификатор датчика, данные которого интересуют
from - начало временного диапазона в формате YYYY-MM-DD HH:mm:ss
to - конец временного диапазона в формате YYYY-MM-DD HH:mm:ss
amount - кол-во временных интервалов, на которое нужно разбить временной диапазон
D - размер дельта-окрестности (в процентах от интервала), в пределах которой ищется точка

Возвращает список в формате JSON:
Пример:
{
   "amount": 5,
   "data": [
       {
           "T": 1000,
           "H": 1000,
           "t": "2021-10-31 23:50:00"
       },
       {
           "T": 1000,
           "H": 1000,
           "t": "2021-10-31 23:55:00"
       }]
}

Логика работы метода:

1. Получает запрос на вывод данных по заданному датчику в указанном диапазоне времени
2. Подключается к БД MSSQL, хранящей значения датчиков, снятые в определенныме моменты времени
3. Извлекает из БД фактические значения датчика в заданном диапазоне
4. Формирует массив расчетных временных меток исходя из заданного кол-ва временных интервалов
5. Выполняет поиск фактических значений, ближайших к расчетным меткам в рамках заданной дельта-окрестности
6. Если фактическое значение не найдено, в массив результатов помещается фиктивное значение 1000
7. Сервис возвращает массив фактических значений, ближайших к расчетным, либо фиктивные значения см. п.6

2) GET http://host:port/api/last/:id
Параметры запроса:
id - идентификатор датчика
Возвращает последние доступные в БД значения для заданного датчика в формате JSON
Пример:
{
   "T": 21.35,
   "H": 44.17,
   "t": "2023-09-24 23:59:48"
}


2. СБОРКА И УСТАНОВКА

1) Сервис на писан на языке Golang (Go).
2) Запуск сервиса рекомендуется делать в Docker-контейнере.
3) Для сборки приложения потребуется установить Docker Desktop: https://www.docker.com/products/docker-desktop/
4) После установки рекомендуется создать учетную запись в сервисе https://hub.docker.com/ для хранения там собранных Docker-образов с приложением.
5) После создания учетной записи необходимо под ней авторизоваться в Docker Desktop.
6) Далее для сборки и заливки образа с приложением репозиторий https://hub.docker.com/ необходимо выполнить команду:

docker build -t dmitryavdonin/promis-monapi:2.0.5 . && docker push dmitryavdonin/promis-monapi:2.0.5

здесь вместо dmitryavdonin необходимо указать логин учетной записи, созданной на шаег 4.

вместо 2.0.5 можно указать новую версию приложения при необходимости или написать latest

3. РАЗВЕРТЫВАНИЕ И ЗАПУСК

1) Для развертывания на целевой машине c ОС Linux (например, Ubuntu) необходимо установить docker-compose c помощью команды
sudo apt-get install docker-compose

2) в домашний каталог ./home поместить файл docker-compose.yaml с таким содежимым:


version: '3.9'

services:
  monapi:
    image: dmitryavdonin/promis-monapi:2.0.5
    container_name: monapi
    ports:
      - '8000:8000'

    environment:
      - APP_SERVICE_NAME=monapi
      - APP_PORT=8000
      - DB_DBNAME=Monitoring
      - DB_HOST=10.100.0.42
      - DB_PORT=1433
      - DB_USERNAME=elma_monitoring1
      - DB_PASSWORD=7896321

Здесь вместо dmitryavdonin/promis-monapi:2.0.5 необходимо указаль логин учетки, созданной в https://hub.docker.com/ на шаге 4 раздела сборка и версию приложения (либо latest).
В разделе environment указываются параметры окружения, которые будет использовать приложение при работе. В полях DB_* нужно указать параметры подключения к БД.


3) Для запуска сервиса необходимо в каталоге с файлом docker-compose.yaml запустить команду:

sudo docker-compose up -d

Это приведет к скачиванию из репозитория Docker-образа promis-monapi и запуску контейнера с приложением.
Контейнер будет запуще в виде службы (демона), т.е. в неинтерактивном режиме.
Для остановки контейнера необходимо в той же папке выполнить команду:
sudo docker-compose down

